{"/home/travis/build/npmtest/node-npmtest-nano/test.js":"/* istanbul instrument in package npmtest_nano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nano/lib.npmtest_nano.js":"/* istanbul instrument in package npmtest_nano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nano = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nano = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nano/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nano && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nano */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nano\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nano.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_nano.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nano.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_nano.__dirname +\n                    '/lib.npmtest_nano.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nano/node_modules/nano/lib/nano.js":"// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\n'use strict';\n\nvar u = require('url');\nvar assert = require('assert');\nvar querystring = require('querystring');\nvar request = require('request');\nvar errs = require('errs');\nvar _ = require('underscore');\nvar follow = require('follow');\nvar logger = require('./logger');\n\nvar nano;\n\nmodule.exports = exports = nano = function dbScope(cfg) {\n  var serverScope = {};\n\n  if (typeof cfg === 'string') {\n    cfg = {url: cfg};\n  }\n\n  assert.equal(typeof cfg, 'object',\n    'You must specify the endpoint url when invoking this module');\n  assert.ok(/^https?:/.test(cfg.url), 'url is not valid');\n\n  cfg = _.clone(cfg);\n\n  serverScope.config = cfg;\n  cfg.requestDefaults = cfg.requestDefaults || {jar: false};\n\n  var httpAgent = (typeof cfg.request === 'function') ? cfg.request :\n    request.defaults(cfg.requestDefaults);\n  var followAgent = (typeof cfg.follow === 'function') ? cfg.follow : follow;\n  var log = typeof cfg.log === 'function' ? cfg.log : logger(cfg);\n  var parseUrl = 'parseUrl' in cfg ? cfg.parseUrl : true;\n\n  function maybeExtractDatabaseComponent() {\n    if (!parseUrl) {\n      return;\n    }\n\n    var path = u.parse(cfg.url);\n    var pathArray = path.pathname.split('/').filter(function(e) { return e; });\n    var db = pathArray.pop();\n    var rootPath = path.pathname.replace(/\\/?$/, '/..');\n\n    if (db) {\n      cfg.url = urlResolveFix(cfg.url, rootPath).replace(/\\/?$/, '');\n      return db;\n    }\n  }\n  \n  function scrub(str) {\n    if (str) {\n      str = str.replace(/\\/\\/(.*)@/,\"//XXXXXX:XXXXXX@\");\n    }\n    return str;\n  }\n\n  function relax(opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {path: ''};\n    }\n\n    if (typeof opts === 'string') {\n      opts = {path: opts};\n    }\n\n    if (!opts) {\n      opts = {path: ''};\n      callback = null;\n    }\n\n    var qs = _.extend({}, opts.qs);\n\n    var headers = {\n      'content-type': 'application/json',\n      accept: 'application/json'\n    };\n\n    var req = {\n      method: (opts.method || 'GET'),\n      headers: headers,\n      uri: cfg.url\n    };\n\n    var parsed;\n    var rh;\n\n    // https://github.com/mikeal/request#requestjar\n    var isJar = opts.jar || cfg.jar;\n\n    if (isJar) {\n      req.jar = isJar;\n    }\n\n    // http://wiki.apache.org/couchdb/HTTP_database_API#Naming_and_Addressing\n    if (opts.db) {\n      req.uri = urlResolveFix(req.uri, encodeURIComponent(opts.db));\n    }\n\n    if (opts.multipart) {\n      req.multipart = opts.multipart;\n    }\n\n    req.headers = _.extend(req.headers, opts.headers, cfg.defaultHeaders);\n\n    if (opts.path) {\n      req.uri += '/' + opts.path;\n    } else if (opts.doc) {\n      if (!/^_design/.test(opts.doc)) {\n        // http://wiki.apache.org/couchdb/HTTP_Document_API#Naming.2FAddressing\n        req.uri += '/' + encodeURIComponent(opts.doc);\n      } else {\n        // http://wiki.apache.org/couchdb/HTTP_Document_API#Document_IDs\n        req.uri += '/' + opts.doc;\n      }\n\n      // http://wiki.apache.org/couchdb/HTTP_Document_API#Attachments\n      if (opts.att) {\n        req.uri += '/' + opts.att;\n      }\n    }\n\n    // prevent bugs where people set encoding when piping\n    if (opts.encoding !== undefined && callback) {\n      req.encoding = opts.encoding;\n      delete req.headers['content-type'];\n      delete req.headers.accept;\n    }\n\n    if (opts.contentType) {\n      req.headers['content-type'] = opts.contentType;\n      delete req.headers.accept;\n    }\n\n    // http://guide.couchdb.org/draft/security.html#cookies\n    if (cfg.cookie) {\n      req.headers['X-CouchDB-WWW-Authenticate'] = 'Cookie';\n      req.headers.cookie = cfg.cookie;\n    }\n\n    // http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n    if (typeof opts.qs === 'object' && !_.isEmpty(opts.qs)) {\n      ['startkey', 'endkey', 'key', 'keys'].forEach(function(key) {\n        if (key in opts.qs) {\n          qs[key] = JSON.stringify(opts.qs[key]);\n        }\n      });\n      req.qs = qs;\n    }\n\n    if (opts.body) {\n      if (Buffer.isBuffer(opts.body) || opts.dontStringify) {\n        req.body = opts.body;\n      } else {\n        req.body = JSON.stringify(opts.body, function(key, value) {\n          // don't encode functions\n          if (typeof(value) === 'function') {\n            return value.toString();\n          } else {\n            return value;\n          }\n        });\n      }\n    }\n\n    if (opts.form) {\n      req.headers['content-type'] =\n        'application/x-www-form-urlencoded; charset=utf-8';\n      req.body = querystring.stringify(opts.form).toString('utf8');\n    }\n\n    log(req);\n\n    if (!callback) {\n      return httpAgent(req);\n    }\n\n    return httpAgent(req, function(e, h, b) {\n      rh = h && h.headers || {};\n      rh.statusCode = h && h.statusCode || 500;\n      rh.uri = req.uri;\n\n      if (e) {\n        log({err: 'socket', body: b, headers: rh});\n        return callback(errs.merge(e, {\n          message: 'error happened in your connection',\n          scope: 'socket',\n          errid: 'request'\n        }));\n      }\n\n      delete rh.server;\n      delete rh['content-length'];\n\n      if (opts.dontParse) {\n        parsed = b;\n      } else {\n        try { parsed = JSON.parse(b); } catch (err) { parsed = b; }\n      }\n\n      if (rh.statusCode >= 200 && rh.statusCode < 400) {\n        log({err: null, body: parsed, headers: rh});\n        return callback(null, parsed, rh);\n      }\n\n      log({err: 'couch', body: parsed, headers: rh});\n\n      // cloudant stacktrace\n      if (typeof parsed === 'string') {\n        parsed = {message: parsed};\n      }\n\n      if (!parsed.message && (parsed.reason || parsed.error)) {\n        parsed.message = (parsed.reason || parsed.error);\n      }\n\n      // fix cloudant issues where they give an erlang stacktrace as js\n      delete parsed.stack;\n\n      // scrub credentials\n      req.uri = scrub(req.uri);\n      rh.uri = scrub(rh.uri);\n      if (req.headers.cookie) {\n        req.headers.cookie = \"XXXXXXX\";\n      }\n\n      callback(errs.merge({\n        message: 'couch returned ' + rh.statusCode,\n        scope: 'couch',\n        statusCode: rh.statusCode,\n        request: req,\n        headers: rh,\n        errid: 'non_200'\n      }, errs.create(parsed)));\n    });\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/authn.html#cookie-authentication\n  function auth(username, password, callback) {\n    return relax({\n      method: 'POST',\n      db: '_session',\n      form: {\n        name: username,\n        password: password\n      }\n    }, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/authn.html#post--_session\n  function session(callback) {\n    return relax({db: '_session'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#get--_db_updates\n  function updates(qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n    return relax({\n      db: '_db_updates',\n      qs: qs\n    }, callback);\n  }\n\n  function followUpdates(qs, callback) {\n    return followDb('_db_updates', qs, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#put--db\n  function createDb(dbName, callback) {\n    return relax({db: dbName, method: 'PUT'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#delete--db\n  function destroyDb(dbName, callback) {\n    return relax({db: dbName, method: 'DELETE'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/common.html#get--db\n  function getDb(dbName, callback) {\n    return relax({db: dbName}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#get--_all_dbs\n  function listDbs(callback) {\n    return relax({db: '_all_dbs'}, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/compact.html#post--db-_compact\n  function compactDb(dbName, ddoc, callback) {\n    if (typeof ddoc === 'function') {\n      callback = ddoc;\n      ddoc = null;\n    }\n    return relax({\n      db: dbName,\n      doc: '_compact',\n      att: ddoc,\n      method: 'POST'\n    }, callback);\n  }\n\n  // http://docs.couchdb.org/en/latest/api/database/changes.html#get--db-_changes\n  function changesDb(dbName, qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n    return relax({db: dbName, path: '_changes', qs: qs}, callback);\n  }\n\n  function followDb(dbName, qs, callback) {\n    if (typeof qs === 'function') {\n      callback = qs;\n      qs = {};\n    }\n\n    qs.db = urlResolveFix(cfg.url, encodeURIComponent(dbName));\n\n    if (typeof callback === 'function') {\n      return followAgent(qs, callback);\n    } else {\n      return new followAgent.Feed(qs);\n    }\n  }\n\n  function _serializeAsUrl(db) {\n    if (typeof db === 'object' && db.config && db.config.url && db.config.db) {\n      return urlResolveFix(db.config.url, encodeURIComponent(db.config.db));\n    } else {\n      return db;\n    }\n  }\n\n  // http://docs.couchdb.org/en/latest/api/server/common.html#post--_replicate\n  function replicateDb(source, target, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    opts.source = _serializeAsUrl(source);\n    opts.target = _serializeAsUrl(target);\n\n    return relax({db: '_replicate', body: opts, method: 'POST'}, callback);\n  }\n\n  function docModule(dbName) {\n    var docScope = {};\n    dbName = decodeURIComponent(dbName);\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#put--db-docid\n    // http://docs.couchdb.org/en/latest/api/database/common.html#post--db\n    function insertDoc(doc, qs, callback) {\n      var opts = {db: dbName, body: doc, method: 'POST'};\n\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      if (typeof qs === 'string') {\n        qs = {docName: qs};\n      }\n\n      if (qs) {\n        if (qs.docName) {\n          opts.doc = qs.docName;\n          opts.method = 'PUT';\n          delete qs.docName;\n        }\n        opts.qs = qs;\n      }\n\n      return relax(opts, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#delete--db-docid\n    function destroyDoc(docName, rev, callback) {\n      return relax({\n        db: dbName,\n        doc: docName,\n        method: 'DELETE',\n        qs: {rev: rev}\n      }, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#get--db-docid\n    function getDoc(docName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({db: dbName, doc: docName, qs: qs}, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#head--db-docid\n    function headDoc(docName, callback) {\n      return relax({\n        db: dbName,\n        doc: docName,\n        method: 'HEAD',\n        qs: {}\n      }, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#copy--db-docid\n    function copyDoc(docSrc, docDest, opts, callback) {\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n\n      var qs = {\n        db: dbName,\n        doc: docSrc,\n        method: 'COPY',\n        headers: {'Destination': docDest}\n      };\n\n      if (opts.overwrite) {\n        return headDoc(docDest, function(e, b, h) {\n          if (e && e.statusCode !== 404) {\n            return callback(e);\n          }\n          qs.headers.Destination += '?rev=' +\n            h.etag.substring(1, h.etag.length - 1);\n          return relax(qs, callback);\n        });\n      } else {\n        return relax(qs, callback);\n      }\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#get--db-_all_docs\n    function listDoc(qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({db: dbName, path: '_all_docs', qs: qs}, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#post--db-_all_docs\n    function fetchDocs(docNames, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      qs['include_docs'] = true;\n\n      return relax({\n        db: dbName,\n        path: '_all_docs',\n        method: 'POST',\n        qs: qs,\n        body: docNames\n      }, callback);\n    }\n\n    function fetchRevs(docNames, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n      return relax({\n        db: dbName,\n        path: '_all_docs',\n        method: 'POST',\n        qs: qs,\n        body: docNames\n      }, callback);\n    }\n\n    function view(ddoc, viewName, meta, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      var viewPath = '_design/' + ddoc + '/_' + meta.type + '/'  + viewName;\n\n      // Several search parameters must be JSON-encoded; but since this is an\n      // object API, several parameters need JSON endoding.\n      var paramsToEncode = ['counts', 'drilldown', 'group_sort', 'ranges', 'sort'];\n      paramsToEncode.forEach(function(param) {\n        if (param in qs) {\n          qs[param] = JSON.stringify(qs[param]);\n        }\n      });\n\n      if (qs && qs.keys) {\n        var body = {keys: qs.keys};\n        delete qs.keys;\n        return relax({\n          db: dbName,\n          path: viewPath,\n          method: 'POST',\n          qs: qs,\n          body: body\n        }, callback);\n      } else {\n        var req = {\n          db: dbName,\n          method: meta.method || 'GET',\n          path: viewPath,\n          qs: qs\n        };\n\n        if (meta.body) {\n          req.body = meta.body;\n        }\n\n        return relax(req, callback);\n      }\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/views.html#post--db-_design-ddoc-_view-view\n    function viewDocs(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'view'}, qs, callback);\n    }\n\n    // geocouch\n    function viewSpatial(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'spatial'}, qs, callback);\n    }\n\n    // cloudant\n    function viewSearch(ddoc, viewName, qs, callback) {\n      return view(ddoc, viewName, {type: 'search'}, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/render.html#get--db-_design-ddoc-_show-func\n    function showDoc(ddoc, viewName, docName, qs, callback) {\n      return view(ddoc, viewName + '/' + docName, {type: 'show'}, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/ddoc/render.html#put--db-_design-ddoc-_update-func-docid\n    function updateWithHandler(ddoc, viewName, docName, body, callback) {\n      return view(ddoc, viewName + '/' + encodeURIComponent(docName), {\n        type: 'update',\n        method: 'PUT',\n        body: body\n      }, callback);\n    }\n\n    function viewWithList(ddoc, viewName, listName, qs, callback) {\n      return view(ddoc, listName + '/' + viewName, {\n        type: 'list'\n      }, qs, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/database/bulk-api.html#post--db-_bulksDoc\n    function bulksDoc(docs, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        path: '_bulk_docs',\n        body: docs,\n        method: 'POST',\n        qs: qs\n      }, callback);\n    }\n\n    // http://docs.couchdb.org/en/latest/api/document/common.html#creating-multiple-attachments\n    function insertMultipart(doc, attachments, qs, callback) {\n      if (typeof qs === 'string') {\n        qs = {docName: qs};\n      }\n\n      var docName = qs.docName;\n      delete qs.docName;\n\n      doc = _.extend({_attachments: {}}, doc);\n\n      var multipart = [];\n\n      attachments.forEach(function(att) {\n        doc._attachments[att.name] = {\n          follows: true,\n          length: Buffer.isBuffer(att.data) ?\n            att.data.length : Buffer.byteLength(att.data),\n          /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\n          'content_type': att.content_type\n        };\n        multipart.push({body: att.data});\n      });\n\n      multipart.unshift({\n        'content-type': 'application/json',\n        body: JSON.stringify(doc)\n      });\n\n      return relax({\n        db: dbName,\n        method: 'PUT',\n        contentType: 'multipart/related',\n        doc: docName,\n        qs: qs,\n        multipart: multipart\n      }, callback);\n    }\n\n    function getMultipart(docName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      qs.attachments = true;\n\n      return relax({\n        db: dbName,\n        doc: docName,\n        encoding: null,\n        contentType: 'multipart/related',\n        qs: qs\n      }, callback);\n    }\n\n    function insertAtt(docName, attName, att, contentType, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        att: attName,\n        method: 'PUT',\n        contentType: contentType,\n        doc: docName,\n        qs: qs,\n        body: att,\n        dontStringify: true\n      }, callback);\n    }\n\n    function getAtt(docName, attName, qs, callback) {\n      if (typeof qs === 'function') {\n        callback = qs;\n        qs = {};\n      }\n\n      return relax({\n        db: dbName,\n        att: attName,\n        doc: docName,\n        qs: qs,\n        encoding: null,\n        dontParse: true\n      }, callback);\n    }\n\n    function destroyAtt(docName, attName, qs, callback) {\n      return relax({\n        db: dbName,\n        att: attName,\n        method: 'DELETE',\n        doc: docName,\n        qs: qs\n      }, callback);\n    }\n\n    // db level exports\n    docScope = {\n      info: function(cb) {\n        return getDb(dbName, cb);\n      },\n      replicate: function(target, opts, cb) {\n        return replicateDb(dbName, target, opts, cb);\n      },\n      compact: function(cb) {\n        return compactDb(dbName, cb);\n      },\n      changes: function(qs, cb) {\n        return changesDb(dbName, qs, cb);\n      },\n      follow: function(qs, cb) {\n        return followDb(dbName, qs, cb);\n      },\n      auth: auth,\n      session: session,\n      insert: insertDoc,\n      get: getDoc,\n      head: headDoc,\n      copy: copyDoc,\n      destroy: destroyDoc,\n      bulk: bulksDoc,\n      list: listDoc,\n      fetch: fetchDocs,\n      fetchRevs: fetchRevs,\n      config: {url: cfg.url, db: dbName},\n      multipart: {\n        insert: insertMultipart,\n        get: getMultipart\n      },\n      attachment: {\n        insert: insertAtt,\n        get: getAtt,\n        destroy: destroyAtt\n      },\n      show: showDoc,\n      atomic: updateWithHandler,\n      updateWithHandler: updateWithHandler,\n      search: viewSearch,\n      spatial: viewSpatial,\n      view: viewDocs,\n      viewWithList: viewWithList\n    };\n\n    docScope.view.compact = function(ddoc, cb) {\n      return compactDb(dbName, ddoc, cb);\n    };\n\n    return docScope;\n  }\n\n  // server level exports\n  serverScope = _.extend(serverScope, {\n    db: {\n      create: createDb,\n      get: getDb,\n      destroy: destroyDb,\n      list: listDbs,\n      use: docModule,\n      scope: docModule,\n      compact: compactDb,\n      replicate: replicateDb,\n      changes: changesDb,\n      follow: followDb,\n      followUpdates: followUpdates,\n      updates: updates\n    },\n    use: docModule,\n    scope: docModule,\n    request: relax,\n    relax: relax,\n    dinosaur: relax,\n    auth: auth,\n    session: session,\n    updates: updates,\n    followUpdates: followUpdates\n  });\n\n  var db = maybeExtractDatabaseComponent();\n\n  return db ? docModule(db) : serverScope;\n};\n\n/*\n * and now an ascii dinosaur\n *              _\n *            / _) ROAR! i'm a vegan!\n *     .-^^^-/ /\n *  __/       /\n * /__.|_|-|_|\n *\n * thanks for visiting! come again!\n */\nnano.version = require('../package.json').version;\nnano.path    = __dirname;\n\nfunction urlResolveFix(couchUrl, dbName) {\n  if (/[^\\/]$/.test(couchUrl)) {\n    couchUrl += '/';\n  }\n  return u.resolve(couchUrl, dbName);\n}\n","/home/travis/build/npmtest/node-npmtest-nano/node_modules/nano/lib/logger.js":"// Licensed under the Apache License, Version 2.0 (the 'License'); you may not\n// use this file except in compliance with the License. You may obtain a copy of\n// the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an 'AS IS' BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations under\n// the License.\n\n'use strict';\n\nvar debug = require('debug')('nano/logger');\n\nmodule.exports = function logging(cfg) {\n  var log = cfg && cfg.log;\n  var logStrategy = typeof log === 'function' ? log : debug;\n\n  return function logEvent(prefix) {\n    var eventId = (prefix ? prefix + '-' : '') +\n      (~~(Math.random() * 1e9)).toString(36);\n    return function log() {\n      logStrategy.call(this, eventId, [].slice.call(arguments, 0));\n    };\n  };\n};\n"}